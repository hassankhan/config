<?php
namespace Noodlehaus;

use Noodlehaus\Test\Fixture\SimpleConfig;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-21 at 22:37:22.
 */
class AbstractConfigTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Config
     */
    protected $config;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->config = new SimpleConfig(
            array(
                'host' => 'localhost',
                'port'    => 80,
                'servers' => array(
                    'host1',
                    'host2',
                    'host3'
                ),
                'application' => array(
                    'name'   => 'configuration',
                    'secret' => 's3cr3t'
                )
            )
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Noodlehaus\AbstractConfig::__construct()
     * @covers Noodlehaus\AbstractConfig::getDefaults()
     */
    public function testDefaultOptionsSetOnInstantiation()
    {
        $config = new SimpleConfig(
            array(
                'host' => 'localhost',
                'port'    => 80,
            )
        );
        $this->assertEquals('localhost', $config->get('host'));
        $this->assertEquals(80, $config->get('port'));
    }

    /**
     * @covers Noodlehaus\AbstractConfig::get()
     */
    public function testGet()
    {
        $this->assertEquals('localhost', $this->config->get('host'));
    }

    /**
     * @covers Noodlehaus\AbstractConfig::get()
     */
    public function testGetWithDefaultValue()
    {
        $this->assertEquals(128, $this->config->get('ttl', 128));
    }

    /**
     * @covers Noodlehaus\AbstractConfig::get()
     */
    public function testGetNestedKey()
    {
        $this->assertEquals('configuration', $this->config->get('application.name'));
    }

    /**
     * @covers Noodlehaus\AbstractConfig::get()
     */
    public function testGetNestedKeyWithDefaultValue()
    {
        $this->assertEquals(128, $this->config->get('application.ttl', 128));
    }

    /**
     * @covers Noodlehaus\AbstractConfig::get()
     */
    public function testGetNonexistentKey()
    {
        $this->assertNull($this->config->get('proxy'));
    }

    /**
     * @covers Noodlehaus\AbstractConfig::get()
     */
    public function testGetNonexistentNestedKey()
    {
        $this->assertNull($this->config->get('proxy.name'));
    }

    /**
     * @covers Noodlehaus\AbstractConfig::get()
     */
    public function testGetReturnsArray()
    {
        $this->assertArrayHasKey('name', $this->config->get('application'));
        $this->assertEquals('configuration', $this->config->get('application.name'));
        $this->assertCount(2, $this->config->get('application'));
    }

    /**
     * @covers Noodlehaus\AbstractConfig::set()
     */
    public function testSet()
    {
        $this->config->set('region', 'apac');
        $this->assertEquals('apac', $this->config->get('region'));
    }

    /**
     * @covers Noodlehaus\AbstractConfig::set()
     */
    public function testSetNestedKey()
    {
        $this->config->set('location.country', 'Singapore');
        $this->assertEquals('Singapore', $this->config->get('location.country'));
    }

    /**
     * @covers Noodlehaus\AbstractConfig::set()
     */
    public function testSetArray()
    {
        $this->config->set('database', array(
            'host' => 'localhost',
            'name' => 'mydatabase'
        ));
        $this->assertTrue(is_array($this->config->get('database')));
        $this->assertEquals('localhost', $this->config->get('database.host'));
    }

    /**
     * @covers Noodlehaus\AbstractConfig::set()
     */
    public function testSetAndUnsetArray()
    {
        $this->config->set('database', array(
            'host' => 'localhost',
            'name' => 'mydatabase'
        ));
        $this->assertTrue(is_array($this->config->get('database')));
        $this->assertEquals('localhost', $this->config->get('database.host'));
        $this->config->set('database.host', null);
        $this->assertNull($this->config->get('database.host'));
        $this->config->set('database', null);
        $this->assertNull($this->config->get('database'));
    }

    /**
     * @covers Noodlehaus\AbstractConfig::has()
     */
    public function testHas()
    {
        $this->assertTrue($this->config->has('application'));
        $this->assertFalse($this->config->has('not_exist'));
    }

    /**
     * @covers Noodlehaus\AbstractConfig::has()
     */
    public function testHasNestedKey()
    {
        $this->assertTrue($this->config->has('application.name'));
        $this->assertFalse($this->config->has('application.not_exist'));
        $this->assertFalse($this->config->has('not_exist.name'));
    }
    
    /**
     * @covers Noodlehaus\AbstractConfig::all()
     */
    public function testAll()
    {
        $all = array(
            'host' => 'localhost',
            'port'    => 80,
            'servers' => array(
                'host1',
                'host2',
                'host3'
            ),
            'application' => array(
                'name'   => 'configuration',
                'secret' => 's3cr3t'
            )
        );
        $this->assertEquals($all, $this->config->all());
    }

    /**
     * @covers Noodlehaus\AbstractConfig::offsetGet()
     */
    public function testOffsetGet()
    {
        $this->assertEquals('localhost', $this->config['host']);
    }

    /**
     * @covers Noodlehaus\AbstractConfig::offsetGet()
     */
    public function testOffsetGetNestedKey()
    {
        $this->assertEquals('configuration', $this->config['application.name']);
    }

    /**
     * @covers Noodlehaus\AbstractConfig::offsetExists()
     */
    public function testOffsetExists()
    {
        $this->assertTrue(isset($this->config['host']));
    }

    /**
     * @covers Noodlehaus\AbstractConfig::offsetExists()
     */
    public function testOffsetExistsReturnsFalseOnNonexistentKey()
    {
        $this->assertFalse(isset($this->config['database']));
    }

    /**
     * @covers Noodlehaus\AbstractConfig::offsetSet()
     */
    public function testOffsetSet()
    {
        $this->config['newkey'] = 'newvalue';
        $this->assertEquals('newvalue', $this->config['newkey']);
    }

    /**
     * @covers Noodlehaus\AbstractConfig::offsetUnset()
     */
    public function testOffsetUnset()
    {
        unset($this->config['application']);
        $this->assertNull($this->config['application']);
    }
}
